
#pragma once

#include <motor/memory/allocator.hpp>
#include <string>

namespace motor
{
    using string_t = std::basic_string< char, std::char_traits<char>,
        motor::memory::allocator< char > > ;

    using string_cref_t = string_t const & ;
    using string_ref_t = string_t & ;
    using string_rref_t = string_t && ;
    using string_in_t = string_t const & ;
    using string_out_t = string_t & ;

    static string_t from_std( std::string const & b ) noexcept
    {
        return string_t( b.c_str() ) ;
    }

    template< typename T >
    motor::string_t to_string( T s ) noexcept
    {
        return motor::from_std( std::to_string( s ) ) ;
    }    
}

template<>
struct std::hash<motor::string_t>
{
    std::size_t operator()( motor::string_cref_t s) const noexcept
    {
        return std::hash< std::string >{}( std::string( s.c_str(), s.size() ) ) ;
    }
};